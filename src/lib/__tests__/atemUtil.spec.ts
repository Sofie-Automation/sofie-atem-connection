import { runLengthEncode } from '../atemUtil'

describe('RLE', () => {
	test('no repetitions', () => {
		const sourceArray = [
			0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xab, 0xab,
			0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
		]
		const source = Buffer.from(sourceArray)
		const encoded = runLengthEncode(source)
		const expected = Buffer.from(sourceArray)
		expect(encoded.toString('hex')).toEqual(expected.toString('hex'))
	})

	test('two repetitions', () => {
		const sourceArray = [
			0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xcd, 0xcd,
			0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11,
			0x11, 0x11, 0x11, 0x11,
		]
		const source = Buffer.from(sourceArray)
		const encoded = runLengthEncode(source)
		const expected = Buffer.from(sourceArray)
		expect(encoded.toString('hex')).toEqual(expected.toString('hex'))
	})

	test('three repetitions', () => {
		const sourceArray = [
			0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab,
			0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xab, 0xab, 0xab, 0xab,
			0xab, 0xab, 0xab, 0xab, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
		]
		const source = Buffer.from(sourceArray)
		const encoded = runLengthEncode(source)
		const expected = Buffer.from(sourceArray)
		expect(encoded.toString('hex')).toEqual(expected.toString('hex'))
	})

	test('four repetitions', () => {
		const sourceArray = [
			0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab,
			0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xcd, 0xcd, 0xcd, 0xcd,
			0xcd, 0xcd, 0xcd, 0xcd, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
			0xcd, 0xcd,
		]
		const source = Buffer.from(sourceArray)
		const encoded = runLengthEncode(source)
		const expected = Buffer.from([
			0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xab, 0xab,
			0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xab, 0xab, 0xab, 0xab,
			0xab, 0xab, 0xab, 0xab, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
		])
		expect(encoded.toString('hex')).toEqual(expected.toString('hex'))
	})

	test('five repetitions', () => {
		const sourceArray = [
			0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab,
			0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab,
			0xab, 0xab, 0xab, 0xab, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab,
			0xab, 0xab, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
		]
		const source = Buffer.from(sourceArray)
		const encoded = runLengthEncode(source)
		const expected = Buffer.from([
			0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xab, 0xab,
			0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xab, 0xab, 0xab, 0xab,
			0xab, 0xab, 0xab, 0xab, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
		])
		expect(encoded.toString('hex')).toEqual(expected.toString('hex'))
	})

	test('five repetitions #2', () => {
		const sourceArray = [
			0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab,
			0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab,
			0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
			0xcd, 0xcd, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
		]
		const source = Buffer.from(sourceArray)
		const encoded = runLengthEncode(source)
		const expected = Buffer.from([
			0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xcd, 0xcd, 0xcd, 0xcd,
			0xcd, 0xcd, 0xcd, 0xcd, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
			0xcd, 0xcd,
		])
		expect(encoded.toString('hex')).toEqual(expected.toString('hex'))
	})

	test('five repetitions #3', () => {
		const sourceArray = [
			0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab,
			0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab,
			0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
			0xcd, 0xcd,
		]
		const source = Buffer.from(sourceArray)
		const encoded = runLengthEncode(source)
		const expected = Buffer.from([
			0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xcd, 0xcd, 0xcd, 0xcd,
			0xcd, 0xcd, 0xcd, 0xcd,
		])
		expect(encoded.toString('hex')).toEqual(expected.toString('hex'))
	})

	test('five repetitions #4', () => {
		const sourceArray = [
			0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab,
			0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab,
			0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab,
		]
		const source = Buffer.from(sourceArray)
		const encoded = runLengthEncode(source)
		const expected = Buffer.from([
			0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab,
		])
		expect(encoded.toString('hex')).toEqual(expected.toString('hex'))
	})
})
